uniform vec3 camPos;

uniform sampler2D tex;

varying vec4 fragPos;

void main(void)
{
	vec3 lightPos		= vec3(20.0, 0.0, 5.0);
	vec3 fragToLight	= lightPos - vec3(fragPos);
	vec3 lightDir		= normalize(fragToLight);
	
	vec3 fragToCam		= camPos - vec3(fragPos);
	vec3 camDir			= normalize(fragToCam);
	
	vec3 normal;
	normal[0]			=  2.0 * texture2D(tex, gl_TexCoord[0].st).x - 1.0;
	normal[1]			= -2.0 * texture2D(tex, gl_TexCoord[0].st).y + 1.0;
	normal[2]			= -2.0 * texture2D(tex, gl_TexCoord[0].st).z + 1.0;
	
	float diffuse	= dot(lightDir, normalize(normal)) * 4.0;
	float specular	= dot(camDir, normalize(normal)) * 10.0;

	gl_FragColor = (diffuse + 0.0) * vec4(0.0, 0.7, 1.0, 1.0) / (length(fragToLight));
//	gl_FragColor = vec4(camPos, 1.0);
//	gl_FragColor = vec4(1.0, 0.0, 1.0, 1.0);
	
//	gl_FragColor = texture2D(tex,gl_TexCoord[0].st);
//	gl_FragColor = pow(dot(normalize(relativeCamPos + relativeLightPos), normal), 200.0) * vec4(1.0, 1.0, 1.0, 1.0);
}